# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ../gtest/googletest

# Points to the location of the Google Test libraries
GTEST_LIB_DIR = .

LEVELDB_INC_DIR = ../leveldb/include

# Where to find user code.
SRC_DIR = ../src
INC_DIR = ../include
OBJ_DIR = ../obj
BIN_DIR = ./bin
LIB_DIR = ../lib

SOURCE_FILES = $(shell find $(SRC_DIR) -name '*.cpp')
OBJS = $(patsubst $(SRC_DIR)%.cpp,$(OBJ_DIR)%.o,$(SOURCE_FILES))

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

CFLAGS = -fPIC -std=c99 -O3 -msse4.2 -mpclmul -march=native -funroll-loops -Wstrict-overflow -Wstrict-aliasing -Wall -Wextra -pedantic -Wshadow

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -std=c++11 -I$(LEVELDB_INC_DIR)

# Google Test libraries
GTEST_LIBS = $(LIB_DIR)/libgtest.a $(LIB_DIR)/libgtest_main.a

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
UTILITY_TEST = $(BIN_DIR)/utility_test

FPTREE_TEST = $(BIN_DIR)/fptree_test

TESTS = $(UTILITY_TEST) $(FPTREE_TEST)

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(LIB_DIR) $(OBJ_DIR) $(GTEST_LIBS) $(BIN_DIR) $(TESTS)

clean :
	rm -rf $(GTEST_LIBS) $(TESTS) *.o ../data/* $(BIN_DIR) $(LIB_DIR)
cleano :
	rm -rf $(GTEST_LIBS) *.o $(BIN_DIR) $(OBJ_DIR) $(LIB_DIR)

cleand : 
	rm -rf ../data/*

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
$(OBJ_DIR)/gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -o $@

$(OBJ_DIR)/gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc -o $@

$(LIB_DIR)/libgtest.a : $(OBJ_DIR)/gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

$(LIB_DIR)/libgtest_main.a : $(OBJ_DIR)/gtest-all.o $(OBJ_DIR)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# ===============================TODO: all below=================================
$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp $(DEPS) $(OBJ_DIR)
	$(CXX) $(CXXFLAGS) -I $(INC_DIR) -c $< -o $@

$(OBJ_DIR)/clhash.o : $(SRC_DIR)/clhash.c
	$(CC) $(CFLAGS) -c $(SRC_DIR)/clhash.c -I $(INC_DIR) -o $@

# utility test
$(UTILITY_TEST) : $(OBJ_DIR)/utility.o $(OBJ_DIR)/p_allocator.o $(OBJ_DIR)/clhash.o $(OBJ_DIR)/utility_test.o
	$(CXX) $(CPPFLAGS) -L$(LIB_DIR) -lgtest -lgtest_main $(CXXFLAGS) $^ -lpmem -o $@

$(OBJ_DIR)/utility_test.o : utility_test.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c utility_test.cpp -I$(INC_DIR) -o $@

# fptree test
$(FPTREE_TEST) : $(OBJ_DIR)/fptree.o $(OBJ_DIR)/utility.o $(OBJ_DIR)/p_allocator.o $(OBJ_DIR)/clhash.o $(OBJ_DIR)/fptree_test.o
	$(CXX) $(CPPFLAGS) -L$(LIB_DIR) -lgtest -lgtest_main $(CXXFLAGS) $^ -lpmem -o $@

$(OBJ_DIR)/fptree_test.o : fptree_test.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c fptree_test.cpp -I$(INC_DIR) -o $@

$(BIN_DIR):
	mkdir -p $(BIN_DIR)
$(OBJ_DIR):
	mkdir -p $(OBJ_DIR)
$(LIB_DIR):
	mkdir -p $(LIB_DIR)